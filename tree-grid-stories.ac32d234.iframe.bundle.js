"use strict";(self.webpackChunkgutenberg=self.webpackChunkgutenberg||[]).push([[7608],{"./packages/components/src/tree-grid/stories/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{_default:function(){return _default},default:function(){return stories}});var react=__webpack_require__("./node_modules/react/index.js"),build_module=__webpack_require__("./packages/dom/build-module/index.js"),keycodes_build_module=__webpack_require__("./packages/keycodes/build-module/index.js");const RovingTabIndexContext=(0,react.createContext)(),RovingTabIndexProvider=RovingTabIndexContext.Provider;var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function RovingTabIndex(_ref){let{children:children}=_ref;const[lastFocusedElement,setLastFocusedElement]=(0,react.useState)(),providerValue=(0,react.useMemo)((()=>({lastFocusedElement:lastFocusedElement,setLastFocusedElement:setLastFocusedElement})),[lastFocusedElement]);return(0,jsx_runtime.jsx)(RovingTabIndexProvider,{value:providerValue,children:children})}function getRowFocusables(rowElement){const focusablesInRow=build_module.T_.focusable.find(rowElement,{sequential:!0});if(focusablesInRow&&focusablesInRow.length)return focusablesInRow.filter((focusable=>focusable.closest('[role="row"]')===rowElement))}function TreeGrid(_ref,ref){let{children:children,onExpandRow:onExpandRow=(()=>{}),onCollapseRow:onCollapseRow=(()=>{}),onFocusRow:onFocusRow=(()=>{}),applicationAriaLabel:applicationAriaLabel,...props}=_ref;const onKeyDown=(0,react.useCallback)((event=>{const{keyCode:keyCode,metaKey:metaKey,ctrlKey:ctrlKey,altKey:altKey}=event;if(metaKey||ctrlKey||altKey||![keycodes_build_module.UP,keycodes_build_module.WV,keycodes_build_module.RL,keycodes_build_module.pX,keycodes_build_module.Sd,keycodes_build_module.uR].includes(keyCode))return;event.stopPropagation();const{activeElement:activeElement}=document,{currentTarget:treeGridElement}=event;if(!treeGridElement.contains(activeElement))return;const activeRow=activeElement.closest('[role="row"]'),focusablesInRow=getRowFocusables(activeRow),currentColumnIndex=focusablesInRow.indexOf(activeElement),canExpandCollapse=0===currentColumnIndex,cannotFocusNextColumn=canExpandCollapse&&"false"===activeRow.getAttribute("aria-expanded")&&keyCode===keycodes_build_module.pX;if([keycodes_build_module.RL,keycodes_build_module.pX].includes(keyCode)){let nextIndex;if(nextIndex=keyCode===keycodes_build_module.RL?Math.max(0,currentColumnIndex-1):Math.min(currentColumnIndex+1,focusablesInRow.length-1),canExpandCollapse){if(keyCode===keycodes_build_module.RL){var _activeRow$getAttribu,_getRowFocusables,_getRowFocusables$;if("true"===activeRow.getAttribute("aria-expanded"))return onCollapseRow(activeRow),void event.preventDefault();const level=Math.max(parseInt(null!==(_activeRow$getAttribu=null==activeRow?void 0:activeRow.getAttribute("aria-level"))&&void 0!==_activeRow$getAttribu?_activeRow$getAttribu:1,10)-1,1),rows=Array.from(treeGridElement.querySelectorAll('[role="row"]'));let parentRow=activeRow;for(let i=rows.indexOf(activeRow);i>=0;i--)if(parseInt(rows[i].getAttribute("aria-level"),10)===level){parentRow=rows[i];break}null===(_getRowFocusables=getRowFocusables(parentRow))||void 0===_getRowFocusables||null===(_getRowFocusables$=_getRowFocusables[0])||void 0===_getRowFocusables$||_getRowFocusables$.focus()}if(keyCode===keycodes_build_module.pX){if("false"===activeRow.getAttribute("aria-expanded"))return onExpandRow(activeRow),void event.preventDefault();const focusableItems=getRowFocusables(activeRow);var _focusableItems;if(focusableItems.length>0)null===(_focusableItems=focusableItems[focusableItems.length-1])||void 0===_focusableItems||_focusableItems.focus()}return void event.preventDefault()}if(cannotFocusNextColumn)return;focusablesInRow[nextIndex].focus(),event.preventDefault()}else if([keycodes_build_module.UP,keycodes_build_module.WV].includes(keyCode)){const rows=Array.from(treeGridElement.querySelectorAll('[role="row"]')),currentRowIndex=rows.indexOf(activeRow);let nextRowIndex;if(nextRowIndex=keyCode===keycodes_build_module.UP?Math.max(0,currentRowIndex-1):Math.min(currentRowIndex+1,rows.length-1),nextRowIndex===currentRowIndex)return void event.preventDefault();const focusablesInNextRow=getRowFocusables(rows[nextRowIndex]);if(!focusablesInNextRow||!focusablesInNextRow.length)return void event.preventDefault();focusablesInNextRow[Math.min(currentColumnIndex,focusablesInNextRow.length-1)].focus(),onFocusRow(event,activeRow,rows[nextRowIndex]),event.preventDefault()}else if([keycodes_build_module.Sd,keycodes_build_module.uR].includes(keyCode)){const rows=Array.from(treeGridElement.querySelectorAll('[role="row"]')),currentRowIndex=rows.indexOf(activeRow);let nextRowIndex;if(nextRowIndex=keyCode===keycodes_build_module.Sd?0:rows.length-1,nextRowIndex===currentRowIndex)return void event.preventDefault();const focusablesInNextRow=getRowFocusables(rows[nextRowIndex]);if(!focusablesInNextRow||!focusablesInNextRow.length)return void event.preventDefault();focusablesInNextRow[Math.min(currentColumnIndex,focusablesInNextRow.length-1)].focus(),onFocusRow(event,activeRow,rows[nextRowIndex]),event.preventDefault()}}),[onExpandRow,onCollapseRow,onFocusRow]);return(0,jsx_runtime.jsx)(RovingTabIndex,{children:(0,jsx_runtime.jsx)("div",{role:"application","aria-label":applicationAriaLabel,children:(0,jsx_runtime.jsx)("table",{...props,role:"treegrid",onKeyDown:onKeyDown,ref:ref,children:(0,jsx_runtime.jsx)("tbody",{children:children})})})})}RovingTabIndex.displayName="RovingTabIndex",RovingTabIndex.__docgenInfo={description:"Provider for adding roving tab index behaviors to tree grid structures.\n\n@see https://github.com/WordPress/gutenberg/blob/HEAD/packages/components/src/tree-grid/README.md\n\n@param {Object}    props          Component props.\n@param {WPElement} props.children Children to be rendered",methods:[],displayName:"RovingTabIndex"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/components/src/tree-grid/roving-tab-index.js"]={name:"RovingTabIndex",docgenInfo:RovingTabIndex.__docgenInfo,path:"packages/components/src/tree-grid/roving-tab-index.js"}),TreeGrid.displayName="TreeGrid",TreeGrid.__docgenInfo={description:"Renders both a table and tbody element, used to create a tree hierarchy.\n\n@see https://github.com/WordPress/gutenberg/blob/HEAD/packages/components/src/tree-grid/README.md\n@param {Object}    props                      Component props.\n@param {WPElement} props.children             Children to be rendered.\n@param {Function}  props.onExpandRow          Callback to fire when row is expanded.\n@param {Function}  props.onCollapseRow        Callback to fire when row is collapsed.\n@param {Function}  props.onFocusRow           Callback to fire when moving focus to a different row.\n@param {string}    props.applicationAriaLabel Label to use for the application role.\n@param {Object}    ref                        A ref to the underlying DOM table element.",methods:[],displayName:"TreeGrid",props:{onExpandRow:{defaultValue:{value:"() => {}",computed:!1},required:!1},onCollapseRow:{defaultValue:{value:"() => {}",computed:!1},required:!1},onFocusRow:{defaultValue:{value:"() => {}",computed:!1},required:!1}}};var tree_grid=(0,react.forwardRef)(TreeGrid);function TreeGridRow(_ref,ref){let{children:children,level:level,positionInSet:positionInSet,setSize:setSize,isExpanded:isExpanded,...props}=_ref;return(0,jsx_runtime.jsx)("tr",{...props,ref:ref,role:"row","aria-level":level,"aria-posinset":positionInSet,"aria-setsize":setSize,"aria-expanded":isExpanded,children:children})}"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/components/src/tree-grid/index.js"]={name:"TreeGrid",docgenInfo:TreeGrid.__docgenInfo,path:"packages/components/src/tree-grid/index.js"}),TreeGridRow.displayName="TreeGridRow",TreeGridRow.__docgenInfo={description:"",methods:[],displayName:"TreeGridRow"};var row=(0,react.forwardRef)(TreeGridRow);"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/components/src/tree-grid/row.js"]={name:"TreeGridRow",docgenInfo:TreeGridRow.__docgenInfo,path:"packages/components/src/tree-grid/row.js"});var roving_tab_index_item=(0,react.forwardRef)((function RovingTabIndexItem(_ref,forwardedRef){let{children:children,as:Component,...props}=_ref;const localRef=(0,react.useRef)(),ref=forwardedRef||localRef,{lastFocusedElement:lastFocusedElement,setLastFocusedElement:setLastFocusedElement}=(0,react.useContext)(RovingTabIndexContext);let tabIndex;lastFocusedElement&&(tabIndex=lastFocusedElement===ref.current?0:-1);const allProps={ref:ref,tabIndex:tabIndex,onFocus:event=>setLastFocusedElement(event.target),...props};return"function"==typeof children?children(allProps):(0,jsx_runtime.jsx)(Component,{...allProps,children:children})})),item=(0,react.forwardRef)((function TreeGridItem(_ref,ref){let{children:children,...props}=_ref;return(0,jsx_runtime.jsx)(roving_tab_index_item,{ref:ref,...props,children:children})})),cell=(0,react.forwardRef)((function TreeGridCell(_ref,ref){let{children:children,withoutGridItem:withoutGridItem=!1,...props}=_ref;return(0,jsx_runtime.jsx)("td",{...props,role:"gridcell",children:withoutGridItem?children:(0,jsx_runtime.jsx)(item,{ref:ref,children:children})})})),src_button=__webpack_require__("./packages/components/src/button/index.js"),stories={parameters:{sourceLink:"packages/components/src/tree-grid",storySource:{source:"/**\n * WordPress dependencies\n */\nimport { Fragment } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport TreeGrid, { TreeGridRow, TreeGridCell } from '../';\nimport { Button } from '../../';\n\nexport default {\n\ttitle: 'Components (Experimental)/TreeGrid',\n\tcomponent: TreeGrid,\n};\n\nconst groceries = [\n\t{\n\t\tname: 'Fruit',\n\t\ttypes: [\n\t\t\t{\n\t\t\t\tname: 'Apple',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Orange',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Pear',\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'Vegetable',\n\t\ttypes: [\n\t\t\t{\n\t\t\t\tname: 'Cucumber',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Parsnip',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Pumpkin',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst Descender = ( { level } ) => {\n\tif ( level === 1 ) {\n\t\treturn '';\n\t}\n\tconst indentation = '\\u00A0'.repeat( ( level - 1 ) * 4 );\n\n\treturn <span aria-hidden=\"true\">{ indentation + '├ ' }</span>;\n};\n\nconst Rows = ( { items, level = 1 } ) => {\n\treturn items.map( ( item, index ) => {\n\t\tconst hasChildren = !! item.types && !! item.types.length;\n\t\treturn (\n\t\t\t<Fragment key={ item.name }>\n\t\t\t\t<TreeGridRow\n\t\t\t\t\tpositionInSet={ index + 1 }\n\t\t\t\t\tsetSize={ items.length }\n\t\t\t\t\tlevel={ level }\n\t\t\t\t>\n\t\t\t\t\t<TreeGridCell>\n\t\t\t\t\t\t{ ( props ) => (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Descender level={ level } />\n\t\t\t\t\t\t\t\t<Button variant=\"primary\" { ...props }>\n\t\t\t\t\t\t\t\t\t{ item.name }\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</TreeGridCell>\n\t\t\t\t\t<TreeGridCell>\n\t\t\t\t\t\t{ ( props ) => (\n\t\t\t\t\t\t\t<Button variant=\"secondary\" { ...props }>\n\t\t\t\t\t\t\t\tMove Up\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</TreeGridCell>\n\t\t\t\t\t<TreeGridCell>\n\t\t\t\t\t\t{ ( props ) => (\n\t\t\t\t\t\t\t<Button variant=\"secondary\" { ...props }>\n\t\t\t\t\t\t\t\tMove Down\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</TreeGridCell>\n\t\t\t\t</TreeGridRow>\n\t\t\t\t{ hasChildren && (\n\t\t\t\t\t<Rows items={ item.types } level={ level + 1 } />\n\t\t\t\t) }\n\t\t\t</Fragment>\n\t\t);\n\t} );\n};\n\nexport const _default = () => {\n\treturn (\n\t\t<TreeGrid>\n\t\t\t<Rows items={ groceries } />\n\t\t</TreeGrid>\n\t);\n};\n",locationsMap:{default:{startLoc:{col:24,line:100},endLoc:{col:1,line:106},startBody:{col:24,line:100},endBody:{col:1,line:106}}}}},title:"Components (Experimental)/TreeGrid",component:tree_grid};const groceries=[{name:"Fruit",types:[{name:"Apple"},{name:"Orange"},{name:"Pear"}]},{name:"Vegetable",types:[{name:"Cucumber"},{name:"Parsnip"},{name:"Pumpkin"}]}],Descender=_ref=>{let{level:level}=_ref;if(1===level)return"";const indentation=" ".repeat(4*(level-1));return(0,jsx_runtime.jsx)("span",{"aria-hidden":"true",children:indentation+"├ "})};Descender.displayName="Descender";const Rows=_ref2=>{let{items:items,level:level=1}=_ref2;return items.map(((item,index)=>{const hasChildren=!!item.types&&!!item.types.length;return(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsxs)(row,{positionInSet:index+1,setSize:items.length,level:level,children:[(0,jsx_runtime.jsx)(cell,{children:props=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Descender,{level:level}),(0,jsx_runtime.jsx)(src_button.Z,{variant:"primary",...props,children:item.name})]})}),(0,jsx_runtime.jsx)(cell,{children:props=>(0,jsx_runtime.jsx)(src_button.Z,{variant:"secondary",...props,children:"Move Up"})}),(0,jsx_runtime.jsx)(cell,{children:props=>(0,jsx_runtime.jsx)(src_button.Z,{variant:"secondary",...props,children:"Move Down"})})]}),hasChildren&&(0,jsx_runtime.jsx)(Rows,{items:item.types,level:level+1})]},item.name)}))},_default=()=>(0,jsx_runtime.jsx)(tree_grid,{children:(0,jsx_runtime.jsx)(Rows,{items:groceries})});_default.displayName="_default",_default.__docgenInfo={description:"",methods:[],displayName:"_default"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/components/src/tree-grid/stories/index.js"]={name:"_default",docgenInfo:_default.__docgenInfo,path:"packages/components/src/tree-grid/stories/index.js"})}}]);